// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using SimpleQuiz.Admin.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace SimpleQuiz.Admin.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace SimpleQuiz.Admin.Services.Identity
{
    using global::Refit;
    using global::SimpleQuiz.Admin.Models.Identity;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIdentityService : IIdentityService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIdentityService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<UserOutputModel> IIdentityService.Login(UserInputModel loginInput)
        {
            var arguments = new object[] { loginInput };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(UserInputModel) });
            return (Task<UserOutputModel>)func(Client, arguments);
        }
    }
}

namespace SimpleQuiz.Admin.Services.People
{
    using global::Refit;
    using global::SimpleQuiz.Admin.Models.People;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPeopleService : IPeopleService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPeopleService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IEnumerable<PersonDetailsOutputModel>> IPeopleService.All()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("All", new Type[] {  });
            return (Task<IEnumerable<PersonDetailsOutputModel>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<PersonDetailsOutputModel> IPeopleService.Details(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Details", new Type[] { typeof(int) });
            return (Task<PersonDetailsOutputModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IPeopleService.Edit(int? id, PersonInputModel dealer)
        {
            var arguments = new object[] { id, dealer };
            var func = requestBuilder.BuildRestResultFuncForMethod("Edit", new Type[] { ToNullable(typeof(int)), typeof(PersonInputModel) });
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace SimpleQuiz.Admin.Services.Quizzes
{
    using global::Refit;
    using global::SimpleQuiz.Admin.Models.Quizzes;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIQuizzesService : IQuizzesService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIQuizzesService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IEnumerable<QuizOutputModel>> IQuizzesService.All()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("All", new Type[] {  });
            return (Task<IEnumerable<QuizOutputModel>>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
